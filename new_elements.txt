λ                                                      = * lambda - λ...;
ƛ                                                      = * mapping lambda - ƛ...;
¬  (a: any)                                            = not a
∧  (a: any, b: any)                                    = a and b
⟑  (a: any, b: any)                                    = b and a
∨  (a: any, b: any)                                    = a or b
⟇  (a: any, b: any)                                    = b or a
÷  (a: number, b: number)                              = a / b # division
   (a: number, b: string)                              = b split into a even length pieces. There may be an extra part if the string is too long.
   (a: string, b: number)                              = a split into b even length pieces. There may be an extra part if the string is too long.
   (a: string, b: string)                              = a.split_on_first_occurance(b)
   (otherwise)                                         = vectorise
×  (a: number, b: number)                              = a × b # multiply, multiplication, times
   (a: number, b: string)                              = b repeated a times
   (a: string, b: number)                              = a repeated b times
   (a: string, b: string)                              = [char + b for char in a]
   (otherwise)                                         = vectorise
«                                                      = * base-255 compressed string: «...«
<newline>                                              = * NOP # no-op, nothing
»                                                      = * base-255 compressed number: »...»
°                                                      = * function reference - °defined_function_name;
•  (a: number, b: number)                              = log_a(b)
   (a: number, b: string)                              = [char * a for char in b]
   (a: string, b: number)                              = [char * b for char in a]
   (a: string, b: string)                              = a.with_capitalisation_of(b)
   (a: list, b: list)                                  = a molded to the shape of b
   (otherwise)                                         = vectorise
¿  (a: any)                                            = * apply element if a is truthy - <element>¿
⋄  (a: number)                                         = number of prime factors
   (a: string)                                         = * execute as Vyxal
   (a: function)                                       = * call function
   (otherwise)                                         = vectorise
μ                                                      = * last element as a function - <element>μ
ξ                                                      = * last two elements as a single element - <element><element>ξ
π                                                      = * last three elements as a single element - <element><element><element>π
ρ                                                      = * last four elements as a single element - ....ρ
ς  (a: any)                                            = * inner product - <element>ς
σ  (a: any)                                            = * outer product - <element>σ
φ  (a: any)                                            = * repeat element infinitely, returning a generator - <element>φ
χ                                                      = * everything to the start of the line as a single element
ψ  (a: any, [b: any, c: any])                          = * apply last two elements "parallel" - 3 4 +-ψ -> 7, -1
ω  (a: any, [b: any, c: any])                          = * apply last two elements "parallel" and collect - equivalent to ψ"
ɓ                                                      = * last element double vectorised - <element>ɓ
ƈ  (a: any)                                            = * collect while applying last element is truthy - <element>ƈ
ɗ  (a: any)                                            = * maximum by last element - <element>ɗ
ƒ  (a: any)                                            = * filter by last element - <element>ƒ
ɠ  (a: any)                                            = * minimum by last element - <element>ɠ
ɦ  (a: any)                                            = * map last element over prefixes - <element>ɦ
                                                       = * NOP
!  (a: number)                                         = factorial(a)
   (a: string)                                         = sentence_case(a)
   (otherwise)                                         = vectorise
"  (a: any, b: any)                                    = [a, b] # pair
#                                                      = * comment
$  (a: any, b: any)                                    = b, a # swap
%  (a: number, b: number)                              = a % b # modulo
   (a: number, b: string)                              = (b split into a equal pieces)[-1]
   (a: string, b: number)                              = (a split into b equal pieces)[-1]
   (a: string, b: string)                              = a.format(b)
   (a: string, b: list)                                = a.format(b)
   (otherwise)                                         = vectorise
&                                                      = * apply last element to the register - <element>&
'                                                      = * single character string
(                                                      = * open for loop: (variable|...)
)                                                      = * close for loop
*  (a: number, b: number)                              = a ** b # exponent, exponentiation
   (a: number, b: string)                              = every ath letter of b
   (a: string, b: number)                              = every bth letter of a
   (a: string, b: string)                              = regex.search(pattern=a, string=b).span()
   (otherwise)                                         = vectorise
+  (a: number, b: number)                              = a + b # addition
   (a: number, b: string)                              = concat(a, b)
   (a: string, b: number)                              = concat(a, b)
   (a: string, b: string)                              = concat(a, b)
   (otherwise)                                         = vectorised
,  (a: any)                                            = print(a)
-  (a: number, b: number)                              = a - b # subtraction
   (a: number, string)                                 = ("-" * a) + b
   (a: string, b: number)                              = a + ("-" * b)
   (a: string, b: string)                              = a.remove(b)
   (otherwise)                                         = vectorise
.                                                      = * decimal seperator
/  (a: any)                                            = * reduce by last element - <element>/
0                                                      = * numeric literal
1                                                      = * numeric literal
2                                                      = * numeric literal
3                                                      = * numeric literal
4                                                      = * numeric literal
5                                                      = * numeric literal
6                                                      = * numeric literal
7                                                      = * numeric literal
8                                                      = * numeric literal
9                                                      = * numeric literal
:  (a: any)                                            = a, a  # duplicate
;                                                      = * closes a structure
<  (a: non-list, b: non-list)                          = a < b # less than (numbers converted to strings)
   (a: list, b: any)                                   = vectorise
=  (a: non-list, b: non-list)                          = a == b
   (a: list, b: any)                                   = a == b # vectorising equals
>  (a: non-list, b: non-list)                          = a > b # greater than (numbers converted to strings)
   (a: list, b: any)                                   = vectorise
?                                                      = input()
@                                                      = * define a function: @name:parameters|...;
                                                       = * call a function: @name;
A  (a: any)                                            = all(a) # all truthy
B  (a: number)                                         = int(a, 2) # from binary
   (a: string)                                         = int(a, 2) # from binary
   (otherwise)                                         = vectorise
C  (a: number)                                         = chr(a)
   (a: string)                                         = ord(a) if len(a) == 1 else map(ord, a)
   (otherwise)                                         = vectorise
D  (a: any)                                            = a, a, a # triplicate
E  (a: number)                                         = 2 ** a # 2 power, two power
   (a: string)                                         = eval(a)
   (otherwise)                                         = vectorise
F  (a: number)                                         = list of a's digits
   (a: string)                                         = list of a's characters
   (otherwise)                                         = flattened(a) # flatten, deep flatten
G  (a: any)                                            = max(a) # monadic maximum, maximum iterable
H  (a: any)                                            = a[0]
I  (a: number)                                         = int(a)
   (a: string)                                         = int(a)
   (otherwise)                                         = int(a) using list items as digits
J  (a: any)                                            = ''.join(a)
K  (a: number)                                         = divisors(a)
   (a: string)                                         = all substrings of a that occur more than once # they "divide" a into more than one piece
   (otherwise)                                         = prefixes(a)
L  (a: any)                                            = len(a)
M  (a: any)                                            = mirror(a) # numbers are reversed and added                                        
N  (a: number)                                         = -a # negate, * -1
   (a: string)                                         = swap_case(a)
   (otherwise)                                         = vectorise
O  (a: any)                                            = vectorised sum of a
P  (a: any, b: any)                                    = prepend a to b
Q  (a: any)                                            = "`" + a + "`" # uneval, quotify
R  (a: any)                                            = reversed(a)
S  (a: any)                                            = sorted(a)
T  (a: any)                                            = a[-1]
U  (a: any)                                            = uniquifed(a) # uniquify, unique items
V  (a: number)                                         = 10 ** a
   (a: string)                                         = a.split("\n")
   (otherwise)                                         = vectorise
W  (a: any)                                            = [a] # wrap
X  (a: number)                                         = random.choice(range(a))
   (otherwise)                                         = random.choice(a)
Y  (a: any)                                            = uninterleave(a)
Z  (a: string)                                         = remove all non-letters of a
   (a: number)                                         = 2 ** a
   (otherwise)                                         = vectorise
[                                                      = * open if statement: [truthy|falsey]
\                                                      = * cumulative reduce by last element - <element>\
]                                                      = * close if statement
`                                                      = * string - `...`
^                                                      = * reverse stack
_  (a: any)                                            = discard # pop, remove, trash
a  (a: any, b: number, c: any)                         = a[b] = c
b  (a: number)                                         = to binary
   (a: string)                                         = [bin(ord(char)) for char in a]
   (otherwise)                                         = vectorise
c  (a: any, b: any)                                    = a in b # non-vectorising contains
d  (a: number, b: number)                              = a % b == 0
   (a: number, b: string)                              = a copies of b
   (a: string, b: number)                              = b copies of a
   (otherwise)                                         = vectorise
e  (a: non-function, b: number)                        = a[b:]
   (a: number, b: string)                              = Split b into two sections, the first of which has length a.
   (a: string, b: number)                              = Split a into two sections, the first of which has length b.
   (a: string, b: string)                              = Split a on the first occurance of b
   (a: function, b: number)                            = first b integers where a() is truthy
   (otherwise)                                         = vectorise
f  (a: any, b: any)                                    = remove elements of a that are in b
   (a: any, b: function)                               = filter(b, a) # filter, keep, python filter
g  (a: number, b: number)                              = gcd(a, b) # greatest common denominator
   (a: string, b: non-list)                            = longest common suffix(a, str(b))
   (a: list)                                           = gcd(a)
   (otherwise)                                         = vectorise
h  (a: any, b: number)                                 = a[0:b] # Slice until b
   (a: any, b: non-number)                             = regex.findall(pattern=a, string=b) # re.findall
i  (a: any, b: number)                                 = a[b] # index
   (a: any, b: [x])                                    = a[:b] # 0 to bth item of a, use ȯ for a[b:], needs wrapping index
   (a: any, b: [x, y])                                 = a[x:y] # index, xth to yth item, needs wrapping index
   (a: any, b: [x, y, m])                              = a[x:y:m] # index, xth to yth item step m items, needs wrapping index
j  (a: any, b: any)                                    = a.join(b) # join
k                                                      = * constant digraphs (see near the end of docs)
l  (a: any, b: number)                                 = n-wise_group(a, b) # Cummulative grouping/pairing
   (a: any, b: non-number)                             = length(a) == length(b) # Length of a and b are same?
m  (a: any, b: any)                                    = [[a, item] for item in b] # Vectorised pair
   (a: any, b: function)                               = map(b, a) # map, apply to each
n                                                      = * context variable
o  (a: number, b: number)                              = how many times does b divide a?  # order
   (a: number, b: string)                              = (b / a)[0] # head of string wrapping
   (a: string, b: number)                              = (a / b)[0] # head of string wrapping
   (a: string, b: string)                              = remove b from a until a does not change
   (otherwise)                                         = vectorise
p  (a: number, b: number)                              = range(a, b + 1)  # inclusive range from a to b
   (a: number, b: iterable)                            = cartesian_power(b, times=a)
   (a: iterable, b: number)                            = cartesian_power(a, times=b)
   (a: string, b: string)                              = a.strip(b)
   (otherwise)                                         = vectorise
q                                                      = * quit the program
r  (a: number, b: number)                              = range(a, b)
   (a: number, b: string)                              = stretch left; repeat the first character of b enough times to make it at least length a. Use spaces if b is empty.	
   (a: string, b: number)                              = stretch left; repeat the first character of a enough times to make it at least length b. Use spaces if a is empty.
   (a: string, b: string)                              = regex.has_match(pattern=a, string=b) # regex match
   (a: non-function, b: list)                          = a, vectorised_reverse(b)
   (a: function, b: any)                               = reduce b by a # reduction, reduce
   (a: any, b: function)                               = reduce a by b # reduction, reduce
   (otherwise)                                         = vectorise
s  (a: number, b: number)                              = a choose b (n choose r, ncr, n c r), Binomial Coefficient
   (a: number, b: string)                              = split b at index a
   (a: string, b: number)                              = split a at index b
   (a: string, b: string)                              = regex.split(string=a, pattern=str(b)) # split on regex match
   (a: any, b: function)                               = sorted(a, key=b) # Sort a by b
   (a: function, b: any)                               = sorted(b, key=a) # Sort b by a
   (otherwise)                                         = vectorise
t  (a: any)                                            = truthy indexes in a
u  (a: any, b: number)                                 = rotate a b units to the left
   (a: any, b: any)                                    = a, b rotated to the left once
v  (a: any, b: number)                                 = a wrapped in chunks of length b
   (a: any, b: non-number)                             = split a on b, discarding empty items
   (a: any, b: function)                               = apply b to every second item of a
   (a: function, b: any)                               = apply a to every second item of b
w  (a: any, b: any)                                    = a.split_and_keep_delimiter(b) # Split, but not remove delimiter
x                                                      = * call current function # recursion. Prints entire stack if not in a function/lambda
y  (a: any, b: any)                                    = interleave(a, b) # Interleave
z  (a: any, b: any)                                    = zip(a, b) # Zip
{                                                      = * open while loop: {condition|...}
|                                                      = * branch in structure (syntax), Used to seperate blocks in If/For/While/Lambda/Function definition
}                                                      = * close while loop
~                                                      = * execute element without popping - <element>~
½  (a: number)                                         = a / 2 # half, halve
   (a: string)                                         = a split into two strings of equal lengths (as close as possible)
   (otherwise)                                         = vectorised
Ȧ  (a: any)                                            = any(a)
Ḃ  (a: any)                                            = a, reversed(a) # bifurcate, push a and its reversed copy
Ċ  (a: any)                                            = counts_of_items(a) # Counter of each distinct item of a in itself
Ḋ  (a: number)                                         = a * 2 # double
   (a: string)                                         = a * 2 # double
   (otherwise)                                         = vectorised
Ė  (a: any)                                            = enumerate(a) # Enumerate, Zip with range to length
Ḟ  (a: number)                                         = prime factorisation of a	# ǐU, without duplicates
   (a: string)                                         = a + a[0] # enclosed a
   (otherwise)                                         = vectorised
Ġ  (a: any)                                            = min(a) # monadic minimum, minimum iterable
Ḣ  (a: any)                                            = a[1:] # All but first item
İ  (a: any, b: list)                                   = [a[item] for item in b]  # indexed into
   (a: any, b: function)                               = repeat function b on a while the function results are not-unique
Ŀ
Ṁ
Ṅ  (a: number)                                         = integer_paritions(a) # Integer partitions 
   (otherwise)                                         = " ".join(a) # Join by space
Ȯ
Ṗ  (a: any)                                            = permutations(a) # Permutations
Ṙ  (a: any)                                            = reversed(a) # Reversed, a[::-1]
Ṡ
Ṫ
Ẇ
Ẋ
Ẏ
Ż
ȧ
ḃ
ċ
ḋ
ė
ḟ
ġ
ḣ
ŀ
ṁ
ṅ
ȯ
ṗ
ṙ
ṡ
ṫ
ẇ
ẋ
ẏ
ż
≤
≥
≠
⁼
©
®
∞
₀
₁
₂
₃
₄
₅
₆
₇
₈
₉
⁰
¹
²
³
⁴
⁵
∑
¦
⌈
⌊
¯
±
↳
↲
⋏
⋎
꘍
ꜝ
”
‡
⇧
⇩
∆
ø
Þ
¨
‘
“
ð
□
↑
↓
∴
∵
›
‹
β
τ
¶
§
ε
ʀ
ʁ
ɾ
ɽ
Π
⁽
↕
⁾
⁺
Ɓ
Ƈ
Ɗ
Ƒ
Ɠ
Ƙ
Ɱ
Ɲ
Ƥ
Ƭ
Ʋ
Ȥ
δ
⟨
⟩
→
←
∪
∩
⊍
